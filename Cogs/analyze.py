import firebase_admin
from firebase_admin import credentials, db
import google.generativeai as genai
import json
import asyncio

# --- 1. 초기 설정 (초기화 함수) ---

# 초기화가 중복 실행되는 것을 방지하기 위한 플래그
_is_gemini_initialized = False

def initialize_gemini(gemini_api_key): # <--- 함수 이름 변경 및 파라미터 축소
    """
    Gemini API를 초기화합니다.
    이 함수는 봇의 메인 파일에서 딱 한 번만 호출해야 합니다.
    Firebase는 이 함수 호출 이전에 이미 초기화되어 있어야 합니다.
    """
    global _is_gemini_initialized
    if _is_gemini_initialized:
        print("Gemini API가 이미 초기화되었습니다.")
        return

    # Gemini API 키 설정
    genai.configure(api_key=gemini_api_key)

    _is_gemini_initialized = True
    print("Gemini Analyzer가 성공적으로 초기화되었습니다.")

# --- 2. 데이터 처리 함수 ---

def _get_user_weapon(nickname):
    """(내부용) 특정 유저의 무기 데이터를 가져오는 함수"""
    if not _is_gemini_initialized:
        raise Exception("초기화가 필요합니다. initialize() 함수를 먼저 호출해주세요.")
    ref = db.reference(f"무기/유저/{nickname}")
    return ref.get()

def _get_game_rules():
    """(내부용) 게임의 모든 규칙 데이터를 가져와 하나의 객체로 만드는 함수"""
    if not _is_gemini_initialized:
        raise Exception("초기화가 필요합니다. initialize() 함수를 먼저 호출해주세요.")

    # 1. 최종 규칙을 담을 컨테이너 딕셔너리 생성
    game_rules = {
        "무기기본스탯": {},
        "스킬정보": {}
    }

    # 2. '무기/기본 스탯' 데이터를 가져와 '무기기본스탯' 키에 저장
    ref_weapon_base = db.reference("무기/기본 스탯")
    weapon_stats = ref_weapon_base.get()
    # 데이터가 없을 경우(None)를 대비해 or {} 처리
    game_rules["무기기본스탯"] = weapon_stats or {}

    # 3. '무기/스킬' 데이터를 가져와 '스킬정보' 키에 저장
    ref_skill = db.reference("무기/스킬")
    skill_info = ref_skill.get()
    game_rules["스킬정보"] = skill_info or {}

    # 4. 두 정보가 모두 담긴 최종 딕셔너리 반환
    return game_rules

def _create_dynamic_rulebook(game_rules):
    """(내부용) Firebase 규칙 데이터로 AI용 룰북 텍스트를 생성합니다."""
    
    rulebook_text = """
# '무기 배틀 시뮬레이션' 게임 시스템 명세서 (Final Ver. 2.0)

당신은 이 게임의 최고 전략 분석가 AI입니다. 당신의 임무는 아래의 게임 규칙을 완벽하게 숙지하고, 사용자의 무기 데이터를 기반으로 가장 효율적인 성장 전략과 재화 투자 방법을 조언하는 것입니다. 모든 답변은 이 규칙에 근거해야 합니다.

### 1. 게임 목표
- **핵심 목표:** `강화 재료`, `연마제` 등 다양한 재화를 사용하여 자신만의 무기를 제작하고 강화/계승하여, 다른 유저와의 PvP 대결에서 승리하거나, 강력한 PvE 콘텐츠를 정복하는 것입니다.
- **주요 콘텐츠:** PvP(대전), PvE(레이드, 탑 등반)
- **전투 방식:** 모든 전투는 1:1 턴 기반이며, `스피드` 스탯이 높은 쪽이 선공을 가져갑니다.
- ** 무기:** 무기에는 고유한 스킬들이 존재하며, 무기 종류에 따라 정해져있습니다.

### 2. 주요 스탯
- **공격력 (Attack):** 피해량의 기본이 되는 수치입니다.
- **내구도 (HP/Durability):** 무기의 생명력. 0이 되면 패배합니다.
- **방어력 (Defense):** 상대의 물리/스킬 피해를 감소시킵니다.
- **스피드 (Speed):** 선공 결정, 가속 발동, 상대 명중률 감소에 영향을 줍니다.
- **명중 (Accuracy):** 상대의 회피를 무시하고 공격을 성공시킬 확률을 높입니다. 일반 공격의 대미지 편차를 줄입니다.
- **스킬 증폭 (Spell):** 일부 스킬로 주는 피해량을 증폭시킵니다. 주의) 모든 스킬에 적용되는 스탯이 아님. 낫의 '수확', 스태프의 '명상'이나 '냉기 마법', '화염 마법', '신성 마법'과 같은 특정 스킬만 스킬 증폭에 영향을 받음. 자세한 것은 스킬 설명을 참고
- **치명타 확률 (CritChance):** 치명타 발동 확률입니다. 대부분 무기는 기본 5%의 치명타 확률을 가집니다. 인장 또는 스킬로만 얻을 수 있습니다.
- **치명타 대미지 (CritDamage):** 치명타 발동 시 피해 배율입니다. 대부분 무기는 기본 150%의 치명타 대미지를 가집니다. 인장 또는 스킬로만 얻을 수 있습니다.

### 3. 데미지 공식
1.  **명중률 판정:** `자신 명중 / (자신 명중 + (상대 스피드 / 5 + 상대 회피 스탯) * 1.5)` 확률로 명중합니다. (최소 10%)
2.  **기본 피해량:** `(공격력 * 명중률)` ~ `공격력` 사이의 랜덤 값. 여기에 `피해 증폭`이 곱해집니다.
3.  **치명타:** `치명타 확률`에 따라 발동하며, `치명타 대미지` 배율이 곱해집니다. 일부 스킬에는 이 치명타가 터지지 않습니다.(수확, 화염 마법, 냉기 마법, 신성 마법, 속사, 창격, 기습)
4.  **방어:** 상대의 `방어력`과 자신의 `방어 관통`을 계산하여 최종 피해량이 감소합니다.
5.  **최종 피해:** 마지막으로 상대의 `피해 감소` 스탯(%)이 적용됩니다.

### 4. 강화 시스템
- **목표:** `강화재료`를 소모하여 선택한 종류의 강화를 시도, 성공 시 `+N` 레벨과 세부 스탯을 올립니다. (최대 +20)
- **페널티:** 실패 시 페널티는 없습니다.

#### 4.1. 강화 종류 및 상세 상승 스탯
| 강화 종류 | 주요 상승 스탯 | 상세 상승 수치 |
|:---|:---|:---|
| **공격 강화** | 공격력 | 공격력 +3, 스피드 +1, 방어력 + 2, 내구도 +5 |
| **속도 강화** | 스피드 | 스피드 +5, 공격력 +1, 스킬증폭 +2, 방어력 +1, 내구도 +5 |
| **명중 강화** | 명중 | 명중 +5, 공격력 +1, 스킬증폭 +2, 방어력 + 1, 내구도 +5, 스피드 + 1 |
| **방어 강화** | 방어력 | 방어력 +10, 내구도 +10 |
| **스킬 강화** | 스킬 증폭 | 스킬 증폭 +10, 방어력 +1, 내구도 +5 |
| **밸런스 강화** | 모든 스탯 | 공격력 +1, 스피드 +1, 명중 +1, 방어력 +3, 스킬증폭 +4, 내구도 +7 |

#### 4.2. 강화 레벨별 성공 확률
| 강화 단계 | 성공 확률 | 강화 단계 | 성공 확률 |
|:---|:---:|:---|:---:|
| +0 → +1 | 100% | +10 → +11 | 40% |
| +1 → +2 | 90% | +11 → +12 | 30% |
| +2 → +3 | 90% | +12 → +13 | 20% |
| +3 → +4 | 80% | +13 → +14 | 20% |
| +4 → +5 | 80% | +14 → +15 | 10% |
| +5 → +6 | 80% | +15 → +16 | 10% |
| +6 → +7 | 70% | +16 → +17 | 5% |
| +7 → +8 | 60% | +17 → +18 | 5% |
| +8 → +9 | 60% | +18 → +19 | 3% |
| +9 → +10 | 40% | +19 → +20 | 1% |
#### 4.3 강화재료 (강화의 재료)
- `강화재료`: 강화를 하는데 필요한 재료입니다. 강화재료는 레이드에 참여하거나 미션 클리어, 탑코인 1개로 구매 등으로 얻을 수 있습니다.
#### 4.4. 연마제 (확률 보조 아이템)
- `연마제`: 사용 시 강화 성공 확률을 **+5%** 올려줍니다. 연마제는 탑코인 3개로 구매 가능합니다.
- `특수 연마제`: 사용 시 강화 성공 확률을 **+50%** 올려줍니다. 특수연마제는 탑코인 100개로 구매 가능합니다.

### 5. 계승 시스템
- **조건:** +15강 이상 무기
- **과정:** 새로운 무기 타입을 선택하여 +0으로 초기화하고, +15 초과 강화 횟수만큼의 강화 내역을 랜덤하게 새 무기에 영구적으로 계승합니다.
- **랜덤 계승 보상:** 아래 두 가지 보상 중 하나를 랜덤하게 획득합니다.
    - `'기본 스탯 증가'`
    - `'기본 스킬 레벨 증가'`
- 계승의 한계치는 없으며 강해지기 위해선 지속적인 계승이 필요합니다.
- 유저는 +20강을 도전한뒤 계승하여 추가 강화를 얻을 지, 아니면 +15 부근에서 계승하여 빠르게 계승 보상을 얻을 지 선택합니다.
#### 5.1. 계승 보상 상세 설명
- **기본 스탯 증가:** 새 무기의 모든 기본 스탯(공격력, 내구도 등)이 영구적으로 **30% 증가**한 상태로 시작합니다.
- **기본 스킬 레벨 증가:** 새 무기에 장착된 모든 스킬의 기본 레벨이 영구적으로 **+1**된 상태로 시작합니다.

### 6. 각인 시스템
- 최대 3개의 각인을 장착하여 특수 스탯 보너스를 얻는 별개의 성장 시스템입니다.

#### 6.1. 각인 종류 및 레벨별 성능
| 각인 이름 | 분류 | 레벨별 효과 (Lv.1 ~ Lv.5) |
|:---|:---|:---|
| **약점 간파** | 특수(고정) | 치명타 확률: **기본 20% + 레벨당 10% 추가** |
| **파멸의 일격** | 특수(고정) | 치명타 대미지: **레벨당 30%** |
| **꿰뚫는 집념** | 특수(고정) | 방어력 관통: **기본 20 + 레벨당 10 추가** |
| **강철의 맹세** | 특수(고정) | 피해 감소: **레벨당 5%** |
| **불굴의 심장** | 특수(고정) | 강인함: **레벨당 2** |
| **타오르는 혼** | 특수(고정) | 대미지 증폭: **기본 4% + 레벨당 4% 추가** |
| **바람의 잔상** | 특수(고정) | 회피: **기본 20 + 레벨당 20 추가** |
| **맹공의 인장** | 기본(%) | 공격력: **레벨당 10% 증가** |
| **현자의 인장** | 기본(%) | 스킬 증폭: **레벨당 6% 증가** |
| **집중의 인장** | 기본(%) | 명중: **레벨당 10% 증가** |
| **신속의 인장** | 기본(%) | 스피드: **레벨당 10% 증가** |
| **경화의 인장** | 기본(%) | 방어력: **레벨당 10% 증가** |

#### 6.2. 각인 강화 방법
- `/각인 강화` 명령어를 통해 보유 중인 인장을 강화할 수 있습니다.
- 동일한 종류의 인장을 재료로 소모하여 강화하며, 최대 레벨은 **Lv.5** 입니다.
- **레벨업 필요 재료:**
    - `Lv.1 → Lv.2`: 동일 인장 1개 소모
    - `Lv.2 → Lv.3`: 동일 인장 2개 소모
    - `Lv.3 → Lv.4`: 동일 인장 3개 소모
    - `Lv.4 → Lv.5`: 동일 인장 4개 소모
- **※ 중요 규칙:** 보유한 인장 중 1개는 항상 **장착용**으로 간주되어 재료로 사용할 수 없습니다.
    - *(예시: '파멸의 일격' 인장을 총 4개 보유 시, 1개는 장착용, 3개는 강화 재료로 사용 가능 → Lv.3까지 강화 가능)*

#### 6.2. 각인 획득 방법
- `시즌 미션`을 통해 달마다 정해진 각인을 획득할 수 있습니다.
- `탑 코인 200개`를 통해 랜덤한 각인을 획득할 수 있습니다.
---
"""
    # 7. 동적 생성 테이블 (이 부분은 유지)
    rulebook_text += "\n### 7. 무기 타입별 기본 스탯 (0강 기준)\n"
    rulebook_text += "| 무기 종류 | 공격력 | 내구도 | 명중 | 방어력 | 스피드 | 치명타 확률 | 치명타 대미지 |\n"
    rulebook_text += "|:---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n"
    
    if game_rules and '무기기본스탯' in game_rules and isinstance(game_rules.get('무기기본스탯'), dict):
        for name, stats in game_rules["무기기본스탯"].items():
            rulebook_text += (
                f"| **{name}** | {stats.get('공격력', 0)} | {stats.get('내구도', 0)} | "
                f"{stats.get('명중', 0)} | {stats.get('방어력', 0)} | {stats.get('스피드', 0)} | "
                f"{int(stats.get('치명타 확률', 0) * 100)}% | {stats.get('치명타 대미지', 0)}% |\n"
            )
    rulebook_text += "---\n"

    # 8. 스킬 및 상태이상 설명 (이 부분은 유지)
    rulebook_text += """
### 8. 스킬 및 상태이상 세부 설명 (AI 계산용)

#### A. 공통 쿨타임 시스템
- 스킬의 쿨타임은 한 턴이 지날 때마다 1씩 줄어들며 0이 되면 일반 공격 대신 스킬을 사용합니다.
- 명상 스킬과 같은 대미지 0 스킬을 사용하는 경우에도 일반 공격을 하지 않습니다. (그래서 명상 스킬을 가진 스태프류는 공격 스탯이나 치명타가 중요하지 않습니다.)
- 만약 여러가지의 스킬을 한번에 시전한 경우엔, 그 스킬 대미지와 효과들을 합산하여 표기합니다.(동시 시전 가능)
- **가속:** 매 턴 시작 시 `스피드 5당 1%` 확률로 발동. 모든 스킬의 현재 쿨타임이 1 감소합니다.
- **초가속:** '가속'이 발동했을 때, `200을 초과한 스피드 5당 1%` 확률로 추가 발동. 모든 스킬의 현재 쿨타임이 1 추가로 감소합니다.

#### B. 상태이상 상세 효과
- **출혈 (Bleed):** 매 턴 시작 시 `value` 만큼의 고정 피해를 입습니다.
- **화상 (Burn):** 매 턴 시작 시 `value` 만큼의 고정 피해를 입습니다.
- **독 (Poison):** 매 턴 시작 시 **현재 내구도의 1/16 (6.25%)**에 해당하는 피해를 입습니다.
- **기절 (Stun):** 해당 턴에 아무 행동도 할 수 없습니다.
- **빙결 (Freeze):** 해당 턴에 아무 행동도 할 수 없습니다. (단, 피해를 입으면 즉시 해제됩니다.)
- **침묵 (Silence):** 스킬을 사용할 수 없습니다.
- **속박 (Bind):** 가속이 발동하지 않으며, 회피할 수 없습니다.
- **보호막 (Shield):** `value` 만큼의 피해를 대신 흡수합니다.

#### C. 스킬별 상세 효과 및 데미지 공식

**창격 (v1):** - 무기 타입 '창'의 스킬
- **쿨타임:** `2`
- **피해량 공식:** `(values.기본_피해량 + values.레벨당_피해량_증가 * 레벨) + 공격력 * (values.기본_공격력_계수 + values.레벨당_공격력_계수_증가 * 레벨)`
- **효과:**
    1.  명중 시, 적에게 '꿰뚫림' 상태를 4턴간 부여합니다.
    2.  만약 대상이 이미 '꿰뚫림' 2스택 상태라면, 모든 스택을 소모시키고 **이번 창격 피해량이 2배가 되며** 대상은 1턴간 '기절'합니다.

**수확 (v2):** - 무기 타입 '낫'의 스킬
- **쿨타임:** `2`
- **피해량 공식:** `(values.기본_피해량 + 레벨 * values.레벨당_피해량_증가) + (공격력 * (values.기본_공격력_계수 + 레벨 * values.레벨당_공격력_계수_증가)) + (스킬_증폭 * (values.기본_스킬증폭_계수 + 레벨 * values.레벨당_스킬증폭_계수_증가))`
- **효과:** 입힌 최종 피해량의 `values.기본_흡혈_비율 * 100`% 만큼 자신의 내구도를 회복합니다.

**속사 (v3):** - 무기 타입 '활'의 스킬
- **쿨타임:** `3`
- **타격 횟수:** `2 + floor(스피드 / values.타격횟수결정_스피드값)` 회 만큼 타격합니다.
- **타격당 피해량 공식:** `((values.기본_대미지 + values.레벨당_대미지 * 레벨) + (공격력 * (values.기본_공격력_계수 + 레벨 * values.레벨당_공격력_계수_증가))) * (1 + values.스피드당_계수 * 스피드)`
- **특수 규칙:** 이 공격은 치명타가 적용되지 않습니다.

**강타 (v4):** - 무기 타입 '대검'의 스킬
- **쿨타임:** `3`
- **피해량 공식:** `(values.기본_피해량 + 레벨 * values.레벨당_피해량_증가) + 공격력 * (values.기본_공격력_계수 + 레벨 * values.레벨당_공격력_계수_증가)`
- **효과:**
    1.  이 공격은 상대의 '보호막'을 즉시 파괴합니다.
    2.  치명타로 명중 시, 대상을 1턴간 '기절'시킵니다.
    3.  만약 이 스킬이 **빗나갈 경우**, 시전자(자신)가 1턴간 '기절'합니다.

**기습 (v5):** - 무기 타입 '단검'의 스킬
- **쿨타임:** `3`
- **1단계 (시전 턴):** 공격하지 않고 '은신' 상태에 돌입합니다. 은신 중에는 회피 스탯이 `(values.기본_회피_증가 + values.레벨 * values.레벨당_회피_증가)` 만큼 증가합니다.
- **2단계 (다음 턴):** 일반 공격 대신 아래 공식의 스킬 피해를 입힙니다.
    - **피해량 공식:** `(values.기본_피해량 + ...) + (공격력 * (values.기본_공격력_계수 + ...)) + (스피드 * (values.기본_스피드_계수 + ...))`
- **특수 효과:** 은신 상태에서 **회피에 성공했을 경우**, 다음 턴의 기습 공격에 2턴짜리 '침묵' 효과가 추가됩니다.

**헤드샷 (v6):** - 무기 타입 '조총'의 스킬
- **쿨타임:** `3`
- **피해량 공식:** `(values.기본_피해량 + 레벨 * values.레벨당_피해량_증가) + 공격력 * (values.기본_공격력_계수 + 레벨 * values.레벨당_공격력_계수_증가)`
- **효과:**
    1.  이 스킬은 자체적으로 치명타 확률이 `values.치명타_확률_증가 * 100`% 만큼 증가합니다.
    2.  치명타로 명중 시, 헤드샷의 쿨타임이 1턴 감소합니다.
    3.  스킬 사용 후, 1턴간 '장전' 상태가 되어 행동이 불가능합니다.

**명상 (v7):** - 무기 타입 '스태프'의 스킬, 속성별 마법과 함께 부여됨
- **쿨타임:** `1`
- **효과:**
    1.  모든 스킬의 쿨타임을 즉시 1 감소시킵니다.
    2.  '명상' 스택을 1 획득합니다. (마법 스킬 강화에 사용)
    3.  아래 공식의 '보호막'을 1턴간 얻습니다.
    - **보호막 공식:** `스킬_증폭 * (values.스킬증폭당_보호막_계수 + 레벨 * values.레벨당_보호막_계수_증가)`

**화염 마법 (v8):** - 무기 타입 '스태프(화염)'의 스킬
- **쿨타임:** `3`
- **일반 사용 (플레어):**
    - **피해량 공식:** `(values.기본_피해량 + ...) + 스킬_증폭 * (values.기본_스킬증폭_계수 + ...)`
    - **효과:** 1턴간 '화상' 상태이상을 부여합니다. (화상 피해량: `values.화상_대미지 * 레벨`)
- **강화 사용 (메테오, '명상' 스택 소모 시):**
    - **피해량 공식:** `(values.강화_기본_피해량 + ...) + 스킬_증폭 * (values.강화_기본_스킬증폭_계수 + ...)`
    - **효과:** 1턴간 '기절' 및 3턴간 '화상' 상태이상을 부여합니다.

**냉기 마법 (v9):** - 무기 타입 '스태프(냉기)'의 스킬
- **쿨타임:** `4`
- **일반 사용 (프로스트):**
    - **피해량 공식:** `(values.기본_피해량 + ...) + 스킬_증폭 * (values.기본_스킬증폭_계수 + ...)`
    - **효과:** 1턴간 '빙결' 상태이상을 부여합니다.
- **강화 사용 (블리자드, '명상' 스택 소모 시):**
    - **피해량 공식:** `(values.강화_기본_피해량 + ...) + 스킬_증폭 * (values.강화_기본_스킬증폭_계수 + ...)`
    - **효과:** 3턴간 '빙결', 5턴간 '둔화' 상태이상을 부여합니다. (둔화율: `(values.강화_둔화율 + 레벨 * values.강화_레벨당_둔화율)*100`%)

**신성 마법 (v10):** - 무기 타입 '스태프(신성)'의 스킬
- **쿨타임:** `4`
- **일반 사용 (블레스):**
    - **피해량 공식:** `(values.기본_피해량 + ...) + 스킬_증폭 * (values.기본_스킬증폭_계수 + ...)`
    - **효과:** 자신의 내구도를 `values.레벨당_치유량 * 레벨` 만큼 회복합니다.
- **강화 사용 (저지먼트, '명상' 스택 소모 시):**
    - **피해량 공식:** `(values.강화_기본_피해량 + ...) + 스킬_증폭 * (values.강화_기본_스킬증폭_계수 + ...)`
    - **효과:** 3턴간 '침묵' 상태이상을 부여합니다.

**일섬 (v11):** - 무기 타입 '태도'의 스킬
- **쿨타임:** `3`
- **1단계 (시전 턴):** 이번 턴을 소모하여 다음 턴에 공격을 준비합니다.
- **2단계 (다음 턴):** 아래 공식의 피해를 입히고 2턴간 '출혈'을 부여합니다.
    - **피해량 공식:** `공격력 + (명중 * (values.기본_명중_반영_비율 + values.레벨당_명중_반영_비율 * 레벨))`
    - **출혈 피해량:** `values.출혈_대미지 + values.레벨당_출혈_대미지 * 레벨`
- **출혈 폭발:** 만약 대상이 이미 '출혈' 상태일 경우, 남은 출혈 피해를 모두 더한 후, 그 값의 50%를 이번 공격에 **고정 피해**로 추가하고 기존 출혈을 제거합니다.
- **패시브 효과:** 치명타 공격 시 `values.치명타_확률 * 100`% 확률로 '출혈'을 부여합니다.
---
"""    
    # 9. values 참조 방식 설명 (이 부분은 유지)
    rulebook_text += """
### 9. AI의 스킬 데이터 참조 및 계산 가이드라인

**가장 중요한 지침입니다. 반드시 이 순서대로 데이터를 조합하여 계산해야 합니다.**

AI는 스킬 성능을 분석하기 위해 **두 가지 데이터 소스**를 조합해야 합니다.

1.  **사용자 데이터 (분석 대상):** 프롬프트 하단에 제공되는 JSON 데이터입니다. 여기서는 각 스킬의 **`레벨`** 정보만 가져옵니다.
2.  **공통 규칙 데이터 (`무기/스킬`):** 이 명세서에 포함된 각 스킬의 '설계도'입니다. 여기서는 **`cooldown`**과 **`values`** 객체를 가져옵니다.
3.  **game_rules['스킬정보'][(스킬 이름)]['values']값이 바로 values 입니다. 또 game_rules['스킬정보'][(스킬 이름)]['cooldown']이 cooldown이고, 그 밑의 '전체 쿨타임'이 그 스킬의 쿨타임입니다.
#### 계산 절차

1.  **스킬 및 레벨 확인:** 사용자 데이터에서 분석할 스킬(예: '창격')과 그 **`레벨`**(예: 5)을 확인합니다.
2.  **공통 규칙 확인:** 이 명세서 8-C 항목에서 해당 스킬('창격')의 규칙(피해량 공식, 효과 등)을 찾습니다.
3.  **쿨타임 참조:** `game_rules['스킬정보']['창격']['cooldown']['전체 쿨타임']` 경로에서 스킬의 기본 쿨타임을 가져옵니다.
4.  **세부 수치 참조:** `game_rules['스킬정보']['창격']['values']` 경로에서 피해량 계산에 필요한 모든 기본값(예: `기본_피해량`, `레벨당_피해량_증가` 등)을 가져옵니다.
5.  **최종 계산:** 4번에서 가져온 **기본값**들과 1번에서 확인한 **사용자의 `레벨`**을 조합하여 피해량 공식에 대입, 최종 성능을 계산합니다.

#### 예시: '창격' 스킬 분석 과정

-   **1. 사용자 데이터 확인:**
    -   `{ "스킬": { "창격": { "레벨": 5 } } }`
    -   → **'창격' 스킬의 레벨은 5**

-   **2. 공통 규칙 확인 (`game_rules['스킬정보']`):**
    -   **경로:** `스킬정보.창격`
    -   **쿨타임 데이터:** `cooldown: { "전체 쿨타임": 4 }`
    -   **세부 수치 데이터:** `values: { "기본_피해량": 10, "레벨당_피해량_증가": 2, ... }`

-   **3. 최종 성능 계산:**
    -   **쿨타임:** 4턴
    -   **총 기본 피해량:** `values.기본_피해량` + (`values.레벨당_피해량_증가` * **사용자 레벨**)
        -   `10 + (2 * 5) = 20`
    -   (이후 공격력 계수 등을 같은 방식으로 계산하여 최종 피해량 도출)
"""
    return rulebook_text
# --- 3. 메인 실행 함수 (외부에서 호출할 함수) ---

# 게임 규칙은 자주 바뀌지 않으므로, 캐시에 저장하여 반복적인 DB 조회를 피합니다.
_game_rules_cache = None
_model = None
async def analyze_weapon_for_user(nickname, user_query=None): # async 추가 # <--- 1. user_query 매개변수 추가
    """
    지정된 닉네임의 무기 데이터를 분석하여 AI의 조언을 반환합니다.
    user_query가 제공되면 해당 질문에 대한 답변을, 없으면 일반적인 분석을 수행합니다.

    :param nickname: 분석할 유저의 닉네임
    :param user_query: 사용자가 직접 입력한 질문 (선택 사항)
    :return: AI가 생성한 분석 및 조언 텍스트, 또는 오류 메시지
    """
    global _game_rules_cache, _model

    if not _is_gemini_initialized:
        raise Exception("초기화가 필요합니다. initialize() 함수를 먼저 호출해주세요.")
        
    try:
        # 1. Firebase에서 데이터 가져오기
        user_weapon = _get_user_weapon(nickname)
        if not user_weapon:
            return f"**{nickname}**님의 무기 정보를 찾을 수 없습니다. 먼저 무기를 생성해주세요."
        
        if _game_rules_cache is None:
            print("게임 규칙을 DB에서 로드하여 캐시에 저장합니다...")
            _game_rules_cache = _get_game_rules()
            if not _game_rules_cache:
                return "오류: 게임 규칙 데이터를 DB에서 가져올 수 없습니다. 관리자에게 문의하세요."

        # 2. 동적 룰북 생성
        dynamic_rulebook = _create_dynamic_rulebook(_game_rules_cache)
        
        # 3. 사용자 무기 데이터를 JSON 문자열로 변환
        user_weapon_json = json.dumps(user_weapon, indent=2, ensure_ascii=False)

        # --- 이 부분이 핵심! 공통 규칙 데이터를 JSON 문자열로 변환 ---
        game_rules_json = json.dumps(_game_rules_cache, indent=2, ensure_ascii=False)

        # --- 2. AI에게 내릴 최종 지시사항을 동적으로 생성 ---
        if user_query:
            # 사용자의 질문이 있을 경우
            final_instruction = f"""
### 사용자의 질문
"{user_query}"

### 최종 지시사항
위의 모든 게임 규칙과 사용자 데이터를 바탕으로, **사용자의 질문에 대해 명확하고 구체적인 답변**을 제공해주세요. 답변은 반드시 게임 규칙에 근거해야 하며, 논리적인 이유를 함께 설명해주세요. 시뮬레이션이나 여러 선택지를 비교 분석하는 것도 좋습니다.
"""
        else:
            # 사용자의 질문이 없을 경우 (기존의 일반 분석)
            final_instruction = f"""
### 최종 지시사항
위 규칙과 사용자 데이터를 바탕으로, 다음 항목에 대해 구체적이고 실행 가능한 조언을 **마크다운 형식**으로 작성해주세요.

1.  **현재 무기 성능 종합 평가:** 현재 스탯의 강점과 약점을 명확히 요약해주세요.
2.  **최우선 성장 목표:** 가장 시급하게 개선해야 할 스탯이나 스킬을 1~2개 선정하고, 그 이유를 논리적으로 설명해주세요.
3.  **재화 투자 전략:** 보유한 재화(골드, 강화석 등)를 어디에 투자하는 것이 가장 효율적인지 구체적인 사용처를 추천해주세요.
"""
        
        # 4. 최종 프롬프트 조합
        final_prompt = f"""
{dynamic_rulebook}
---
### 분석 대상 유저 무기 데이터
아래는 분석해야 할 사용자의 무기 데이터입니다. JSON 형식입니다.

```json
{user_weapon_json}
### 공통 게임 규칙 데이터 (JSON)
아래는 모든 플레이어에게 공통으로 적용되는 게임의 규칙 데이터입니다. 스킬의 기본 성능(cooldown, values)을 계산할 때 참조해야 합니다.

```json
{game_rules_json}
{final_instruction}
    """
        # 5. Gemini API 호출
        if _model is None:
            print("Gemini 모델을 로드합니다...")
            _model = genai.GenerativeModel('gemini-1.5-pro-002')

        print(f"'{nickname}'님의 요청 분석 시작: '{user_query or '일반 분석'}'")
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor( # await와 run_in_executor 사용
            None, 
            _model.generate_content, 
            final_prompt
        )
        print("분석이 완료되었습니다.")
        
        return response.text

    except Exception as e:
        print(f"분석 중 오류 발생: {e}")
        return f"AI 분석 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요. (오류: {e})"
    

 # --- 새로운 2인 비교 분석 함수 추가 ---
async def analyze_battle_matchup(my_nickname, opponent_nickname):
    """
    두 플레이어의 무기 데이터를 비교하여 전투 양상과 승률을 예측합니다.
    """
    if not _is_gemini_initialized:
        raise Exception("초기화가 필요합니다. initialize() 함수를 먼저 호출해주세요.")

    global _game_rules_cache, _model
    try:
       
        # 1. 두 플레이어의 데이터 가져오기
        my_weapon = _get_user_weapon(my_nickname)
        if not my_weapon:
            return f"**{my_nickname}**님의 무기 정보를 찾을 수 없습니다."

        opponent_weapon = _get_user_weapon(opponent_nickname)
        if not opponent_weapon:
            return f"**{opponent_nickname}**님의 무기 정보를 찾을 수 없습니다."

        # 2. 게임 규칙 캐시 확인 (기존과 동일)
        if _game_rules_cache is None:
            print("게임 규칙을 DB에서 로드하여 캐시에 저장합니다...")
            _game_rules_cache = _get_game_rules()
            if not _game_rules_cache:
                return "오류: 게임 규칙 데이터를 DB에서 가져올 수 없습니다."
        
        # 3. 룰북 및 데이터 JSON 생성
        dynamic_rulebook = _create_dynamic_rulebook(_game_rules_cache)
        game_rules_json = json.dumps(_game_rules_cache, indent=2, ensure_ascii=False)
        my_weapon_json = json.dumps(my_weapon, indent=2, ensure_ascii=False)
        opponent_weapon_json = json.dumps(opponent_weapon, indent=2, ensure_ascii=False)

        # 4. AI에게 내릴 새로운 지시사항 생성
        final_instruction = f"""
### 최종 지시사항: 전투 승률 예측 및 전략 분석
당신은 최고의 전투 전략 분석가입니다. 아래 제공된 두 플레이어의 데이터와 게임 규칙을 바탕으로 다음 항목에 대해 심층적으로 분석하고 예측해주세요.

1.  **핵심 스탯 비교 분석:**
-   공격력, 스피드, 방어력 등 주요 스탯을 비교하고, 어느 쪽이 어떤 면에서 우위에 있는지 설명해주세요. (예: "A는 스피드가 월등히 높아 선공과 가속 발동에서 유리합니다.")

2.  **상성 및 시너지 분석:**
-   두 플레이어의 무기 타입, 스킬, 각인 조합 간의 상성을 분석해주세요. (예: "A의 '수확' 스킬은 B의 '출혈' 데미지를 상쇄하며 버티는 데 유리하지만, B의 '강타'는 A의 보호막을 무력화시킬 수 있습니다.")

3.  **예상 전투 시나리오 및 승부처:**
-   전투가 어떻게 흘러갈지 예측하고, 승패를 가를 결정적인 '승부처(Turning Point)'가 무엇인지 짚어주세요. (예: "초반 3턴 안에 B가 A의 보호막을 파괴하지 못한다면, 장기전으로 갈수록 A의 승률이 급격히 높아집니다.")

4.  **승률 예측:**
-   모든 분석을 종합하여, **나({my_nickname})의 예상 승률을 퍼센트(%)로 제시**해주세요. (예: "예상 승률: **{my_nickname} 65%** vs **{opponent_nickname} 35%**")

5.  **승리를 위한 최적 전략:**
-   **나({my_nickname})**가 승리 확률을 극대화하기 위해 어떤 스킬을 어떤 순서로 사용하고, 어떤 점을 유의해야 하는지 구체적인 운영 전략을 조언해주세요.
"""

        # 5. 모든 정보를 포함한 최종 프롬프트 생성
        final_prompt = f"""
{dynamic_rulebook}
---
### 공통 게임 규칙 데이터 (JSON)
```json
{game_rules_json}
분석 대상: 나의 무기 데이터 ({my_nickname})
{my_weapon_json}
분석 대상: 상대방의 무기 데이터 ({opponent_nickname})
{opponent_weapon_json}
{final_instruction}
"""     
        if _model is None:
            print("Gemini 모델을 로드합니다...")
            _model = genai.GenerativeModel('gemini-1.5-pro-002')

        # 6. AI 호출 (비동기 처리)
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(
            None, 
            _model.generate_content, 
            final_prompt
        )
        
        return response.text

    except Exception as e:
        return f"분석 중 오류가 발생했습니다: {e}"